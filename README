So, let's try to get some neural network predict the euro tournament.


1. To train the network, we need historic data
----------------------------------------------

https://www.oddsportal.com/soccer/europe/euro-2004/results/
https://www.oddsportal.com/soccer/europe/euro-2008/results/
https://www.oddsportal.com/soccer/europe/euro-2012/results/
https://www.oddsportal.com/soccer/europe/euro-2016/results/

Let's put that in a csv (4 csv ?) and see where we come.

So the content comes from a json call.
Let's save the payload in the docs dir.
And remove the extra stuff.
Leave only the html string.

Iterate over the lines and extract the data.
Hours, Day, Participants, Score are easy to extract.

The odd seems to be encoded in an own cipher.
The decoding must happen in js in browser.
Either it's a lookup table, or there is some trick.
At least they stay constant upon refresh of the page.

So there is always an 'f' in the middle, and often a 'z' on both side.
The z could stand for '.', and maybe only the part after the 'f' is relevant.
Okay, we have two values there: the max amoung the brokers (first part) and the mean (the second part).
It's some simple substitution code.

Refactor the code to process all the data, and generate csv.


2. Once we have the data, we need to define the environment for our ML agent.
-----------------------------------------------------------------------------

We settle on gym.
So we need an observation space and an action space.

The action space is easy:
  its the predicted score

The observation space will simply take all the rows from our data.
 - date ? nope
 - score ? you kidding ? nope
 - only three odds instead of the six
So:
 - 2 x team, 3 x odds

Theoretically, every team in the world could play.

Okay, it's more difficult than I thought to add countries to the observation space ...
Let's remove it for now.


3. Once we have an environment, we can start writing an agent
-------------------------------------------------------------

So the agent trained for 100352 steps, and averaged a bit more than 1 point per match.
That's very bad.
Let's start at 0. again and add the data of the qualification.
And add more randomization: don't play always the same four tournaments.

Ok, it's been learning the whole night.
At the moment it's as ~8 million timesteps, and nothing new emerges: 1.04 points per prediction.


4. Let's do somethig basic: raw pytorch
---------------------------------------
(Or why have a shot ar Reinforcment Learning where the topology of the network is that simple?)

We have three nodes in input, two in output, and let's say two hidden layers of 5 each.
Everything linear, and no activation function for now.
We should define a custom loss method based on the rewards of the betting system.

  Loss functions are a science in themselves.
  I can't really return contant values as a loose the autograd stuff if I make a new tensor.
  So I need to combine loss functions, a bit like the `Huber loss`_.
  What we actually need seems to be an asymmetric loss function: if the right team was predicted as a win, it remains good no matter what the predicted score was.
  I'm not goot at tensor arithmetic.
  That fails.


At the moment, the network doesn't seems to learn anything.
As if the optimizer step would'nt be performed.
Looks like it performs better (weights updates themselves) when i remove the `round()` step.

So I trained a model on 10000 epochs, and he loves to predict 1:1.
That's the problem with the loss function: the draw is not penalized enough, and hence 'near enough' to the right score.


5. Back to 0. add historical knowledge about the FIFA ranking, and integrate the 2020 dataset.
----------------------------------------------------------------------------------------------

Luckily, the FIFA has that data on its website, including historical values.
Luckily 2: There is a kaggle (never heard of that site before) with scraped data.
Kudos goes here: https://github.com/cnc8/fifa-world-ranking

So, download the dataset and write a utility to get values from it.

